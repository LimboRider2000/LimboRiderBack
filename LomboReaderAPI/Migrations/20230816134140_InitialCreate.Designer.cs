// <auto-generated />
using System;
using LimboReaderAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LomboReaderAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230816134140_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("LimboReaderDB")
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("LimboReaderAPI.Data.Entety.Authors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecondName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Authors", "LimboReaderDB");
                });

            modelBuilder.Entity("LimboReaderAPI.Data.Entety.BookArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("Author_idId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("Genre_idId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Rating")
                        .HasColumnType("double");

                    b.Property<Guid>("SubGenre_idId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TitleImgPath")
                        .HasColumnType("longtext");

                    b.Property<Guid>("User_idId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Author_idId");

                    b.HasIndex("Genre_idId");

                    b.HasIndex("SubGenre_idId");

                    b.HasIndex("User_idId");

                    b.ToTable("BookArticles", "LimboReaderDB");
                });

            modelBuilder.Entity("LimboReaderAPI.Data.Entety.Comments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookArticle_Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("User")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Comments", "LimboReaderDB");
                });

            modelBuilder.Entity("LimboReaderAPI.Data.Entety.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Genres", "LimboReaderDB");
                });

            modelBuilder.Entity("LimboReaderAPI.Data.Entety.SubGenre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Genre_id")
                        .HasColumnType("char(36)");

                    b.Property<string>("SubGenreName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SubGenres", "LimboReaderDB");
                });

            modelBuilder.Entity("LimboReaderAPI.Data.Entety.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ActivateCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastLoginDt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RegisterDt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserRole")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users", "LimboReaderDB");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6764db38-5306-4e85-a15d-7392e8422b8a"),
                            Active = false,
                            Email = "admin@ukr.net",
                            Login = "Admin",
                            Name = "Root Administrator",
                            PasswordHash = "CDE2E51D593001C6392593A3332BCEE452B61273",
                            RegisterDt = new DateTime(2023, 8, 16, 16, 41, 40, 686, DateTimeKind.Local).AddTicks(4345),
                            UserRole = "Admin"
                        });
                });

            modelBuilder.Entity("LimboReaderAPI.Data.Entety.BookArticle", b =>
                {
                    b.HasOne("LimboReaderAPI.Data.Entety.Authors", "Author_id")
                        .WithMany()
                        .HasForeignKey("Author_idId");

                    b.HasOne("LimboReaderAPI.Data.Entety.Genre", "Genre_id")
                        .WithMany()
                        .HasForeignKey("Genre_idId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimboReaderAPI.Data.Entety.SubGenre", "SubGenre_id")
                        .WithMany()
                        .HasForeignKey("SubGenre_idId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimboReaderAPI.Data.Entety.User", "User_id")
                        .WithMany()
                        .HasForeignKey("User_idId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author_id");

                    b.Navigation("Genre_id");

                    b.Navigation("SubGenre_id");

                    b.Navigation("User_id");
                });
#pragma warning restore 612, 618
        }
    }
}
